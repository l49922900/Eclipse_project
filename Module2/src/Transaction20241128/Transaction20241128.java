package Transaction20241128;

public class Transaction20241128 {
/*
「交易」（Transaction）:

	是一種用來確保多個資料庫操作能夠作為一個整體進行的機制。具有ACID特性


ACID 特性:

	1.Atomicity（原子性）:交易中的所有操作要麼全部成功，要麼全部失敗並回滾，不會只執行部分操作。
	
	2.Consistency（一致性）:在交易執行之前與之後，資料必須處於一致的狀態。
		例如：如果轉帳交易開始前帳戶 A 和帳戶 B 的總金額是 1000，交易結束後總金額也必須是 1000。

	3.Isolation（隔離性）:多個交易之間不應相互影響，即每個交易的中間狀態對其他交易是不可見的。
		例如：在一個交易完成之前，其他交易不會看到尚未提交的資料。

	4.Durability（持久性）:一旦交易提交，其結果將永久保存，即使系統發生故障，也能保證資料不丟失。


交易在程式中的運作:
	
	1.開始交易（Begin Transaction）:宣告一段交易，告知系統進入交易的上下文。
	2.執行操作:執行一系列資料庫操作或其他需要保持一致性的業務邏輯。
	3.提交交易（Commit Transaction）:如果所有操作成功，將交易的變更永久寫入資料庫。
	4.回滾交易（Rollback Transaction）:如果其中任何操作失敗，將回復到交易開始前的狀態，確保資料一致性。


Spring 中如何管理交易:
	用 @Transactional 註解管理交易，簡化開發。



@Transactional 基本概念:

	1.@Transactional 是用於管理資料庫交易的工具。
	2.交易（Transaction）確保操作是「原子性」的，也就是說，操作要麼全部成功，要麼全部失敗，避免資料不一致。


何時需要使用 @Transactional:

	1.多表操作（涉及資料一致性）
		如果業務邏輯需要同時操作多個資料表，並確保所有操作都成功或失敗，例如訂單生成和扣減庫存，這時候需要 @Transactional。
	
	2.長時間的業務操作
		如果一個業務方法執行了多個需要持久化的操作，且需要確保整體的一致性，例如批量插入或更新。



常見的交易傳播行為:

	REQUIRED
	描述：預設行為。如果當前有交易存在，則加入該交易；如果沒有交易，則開啟一個新的交易。
	使用情境：大多數情況下適用
	
	
	REQUIRES_NEW
	描述：無論當前是否有交易，都會建立一個新的交易，並將當前交易暫停。
	使用情境：需要確保該方法有自己獨立的交易，不受外部交易影響。
	
	
	SUPPORTS
	描述：如果當前有交易存在，則加入該交易；如果沒有交易，則以非交易方式執行。
	使用情境：方法對交易不敏感，可以在交易或非交易上下文中執行。
	
	
	NOT_SUPPORTED
	描述：不使用交易執行方法。如果有當前交易存在，則將該交易暫停。
	使用情境：需要執行一些不適合在交易中執行的操作，例如大量資料查詢。
	
	
	MANDATORY
	描述：必須在已有交易中執行，否則會拋出異常（TransactionRequiredException）。
	使用情境：要求方法只能在交易上下文中執行。
	
	NEVER
	描述：必須在非交易上下文中執行，如果存在交易則拋出異常（IllegalTransactionStateException）。
	使用情境：方法不允許在交易中執行。
	
	NESTED
	描述：如果當前有交易，則在該交易中執行嵌套交易；如果沒有交易，則開啟一個新的交易。
	嵌套交易與父交易共享同一個連接，並支持保存點（Savepoint），可以單獨回滾嵌套交易。

 */
}
