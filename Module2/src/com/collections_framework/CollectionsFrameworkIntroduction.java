package com.collections_framework;

public class CollectionsFrameworkIntroduction {
	/*
	 Java 集合框架（Java Collections Framework）:
	 
	 (1)是一套用來管理和操作一組對象的架構，提供了標準的資料結構（Data Structures）和演算法（Algorithms），以便處理像是陣列、列表、集合和映射等數據結構。
	 (2)「Collection 介面」是「集合框架」的基礎，它定義了集合應該具備的一些基本操作（如增加、刪除、檢查元素等），而具體的實現類別則會根據集合的特性進行擴展和實作
	 (3)***此外，Java 集合框架 不僅包括 Collection 介面，還包括其他例如 Map 介面，但 Map 不屬於 Collection 介面下的繼承結構中。
	 (4)Collections（集合）通常使用泛型（Generics）來指定其元素的資料型態。這意味著在大多數情況下，集合中的元素應該是相同或相容的資料型態。
	 (5)有將集合包裹成為不可變更（不可修改）集合的包覆方法
	 (6)有將非執行緒同步的集合包裹成為執行緒同步集合的包覆方法
	 
	 介面繼承架構:
	 	
	 Collection基礎介面(集合框架的根介面)
		|
		+-- Set
		|   |
		|   +-- SortedSet
		|
		+-- Queue			
		|	  |
		|	  +-- Deque
		|	  
		+-- List
	
	
	   Map基礎介面(集合框架的根介面)
		|
		+-- SortedMap
				
		
		
	***Collection 介面提供了一組通用的方法來操作各種類型的集合，有哪些方法請去看google文件
	 
	 
	 在實際開發中，以下幾個實現類別最為常用：
	 
	    1.ArrayList 和 LinkedList 用於List接口的實現。
		2.HashSet、LinkedHashSet 和 TreeSet 用於Set接口的實現。
		3.HashMap、LinkedHashMap 和 TreeMap 用於Map接口的實現。
		4.PriorityQueue 和 ArrayDeque 用於Queue接口的實現。
	 */
	
	
	public static void main(String[] args) {
		/*
		  List（列表）:

			列表是一個有序的集合，允許元素重複並可依據索引存取元素。



		常用實作類別：
			
			(1)ArrayList：基於動態陣列，適合快速存取元素，但對於插入和刪除操作相對較慢。
			(2)LinkedList：基於鏈結串列（Linked List），插入和刪除操作較快，但隨機存取較慢。
		 */
		
		
		////////////////////////////////////////
		
		
		/*
		 Set（集合）:
			
			集合是不允許重複元素的無序集合。
		
		
		
		常用實作類別：
		
			(1)HashSet：基於雜湊表（Hash Table），不保證元素順序，存取速度快。
			(2)LinkedHashSet：保留元素的插入順序。
			(3)TreeSet (TreeSet同時是Set與SortedSet的實現類)
		 



		SortedSet:
		
			專門用於處理有序的集合。它擴展了 Set 介面，並提供了一些額外的方法來支持元素的有序操作。
			確保集合中的元素按照其自然順序或指定的比較器（Comparator）進行排序。這意味著，SortedSet 不僅保證元素的唯一性（由 Set 提供），還保證元素的有序性。 
		 
		
		 常用實作類別:
		 
		 	(1)TreeSet：基於紅黑樹（Red-Black Tree），會對元素進行排序(TreeSet同時是Set與SortedSet的實現類)。
		 */
				
		
		
		////////////////////////////////////
		
		
		/*
		Queue（佇列）
		
			佇列是一種遵循先進先出（FIFO）的集合，通常用於排隊或任務調度。
		
		
		
		常用實作類別：
		
			(1)LinkedList：也實現了 Queue 介面，可以作為佇列使用。
			(2)PriorityQueue：元素根據優先級進行排序。
		 
		 
		 子介面:Deque（雙端佇列）
		 	
		 	允許在佇列的兩端進行插入和移除操作
		 */
		
		
		///////////////////////////////////////
		
		/*
		Map（映射）
		
			映射（Map）是一種將鍵（Key）映射到值（Value）的數據結構，每個鍵是唯一的，但值可以重複。
		
		常用實作類別：
		
			(1)HashMap：基於雜湊表，提供快速的鍵值對存取，順序不保證。
			(2)TreeMap：基於紅黑樹，會根據鍵的自然順序或自定義順序排序。
			(3)LinkedHashMap：保留鍵值對的插入順序。
		 
		 */
		/////////////////////////////////////////////////
		
		
		/*
		SortedMap:
		
		 	是一個擴展自 Map 介面的子介面，提供了對鍵（key）進行排序的功能或根據指定的比較器進行排序的能力。
		 	這對於需要有序存取元素的應用場景非常有用
		
		實現類：
		
			1.TreeMap
		 */
		
		
		
		///////////////////////////////////////////
		
		/*
		集合框架的優點:
		
			(1)統一介面：所有集合類別都有一致的操作方法，學習成本低。
			(2)豐富的演算法支持：內建了排序、搜尋等常用演算法，開發更加方便。
			(3)擴充性強：可以輕鬆自定義自己的集合類別來適應特殊需求。
		 */
		
		////////////////////////////////////////////
		
		
		/*
		***陣列與集合框架的區別:
		
			傳統陣列（Array）在 Java 中並不屬於集合框架（Collections Framework)的範疇。
			但兩者其實是有方法可以互換的
		 
		 
		 
		 陣列（Array）

			(1)固定大小：一旦創建，陣列的長度無法改變。
			(2)類型一致：陣列中的所有元素必須是相同的數據類型。
			(3)高效存取：可以通過索引快速存取元素，存取速度非常快。
		 


		集合框架（Collections Framework）

			(1)動態大小：集合的大小可以根據需要動態調整。
			(2)靈活性：提供多種數據結構（如 List、Set、Map 等）以滿足不同的需求。
			(3)豐富的操作方法：內建許多方法來添加、刪除、查找、排序等操作元素。
		 */
		
	}
}
